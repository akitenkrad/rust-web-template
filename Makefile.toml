[config]
default_to_workspace = false

[env]
env_file = ".env"
DATABASE_USERNAME = "postgres"
DATABASE_PASSWORD = "password"
DATABASE_PORT = 5432
DATABASE_NAME = "sampledb"

[tasks.format-all]
dependencies = ["sort-cargo-toml", "clippy", "reformat"]
description = "Format all code in the project."

[tasks.build-no-cache]
description = "Build the project."
script = "docker compose build --pull --no-cache --progress=plain"

[tasks.compose-up-db]
description = "Start the PostgreSQL database using Docker Compose."
script = "docker compose up -d postgres"

[tasks.migrate]
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help", version = "0.7.3" }
script = '''
#!/bin/bash
until sqlx migrate run --source data-layer/adapter/migrations; do
  sleep 1
done
'''

[tasks.migrate-revert]
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help", version = "0.7.3" }
script = '''
#!/bin/bash
migration=$(find data-layer/adapter/migrations -type f -name "*down.sql" | sort -r)
for m in ${migration[@]}; do
  echo "Reverting migrations for $m"
  until sqlx migrate revert --source data-layer/adapter/migrations; do
    sleep 1
  done
done
'''

[tasks.before-build]
run_task = [{ name = ["compose-up-db", "migrate", "compose-build"] }]

[tasks.compose-build]
description = "Build the project."
script = ["docker compose build --progress=plain"]

[tasks.sort-cargo-toml]
description = "Sort the Cargo.toml files in the project."
install_crate = "taplo-cli"
script = "taplo fmt --option reorder_keys=true"

[tasks.reformat]
description = "Reformat the code using rustfmt."
script = "cargo fmt -- --emit files"

[tasks.nextest]
dependencies = ["before-build"]
description = "Run all tests in the project."
install_crate = "cargo-nextest"
script = "cargo nextest run --workspace --status-level all --test-threads=1"

[tasks.start-server]
dependencies = ["before-build"]
description = "Start the web application."
script = "docker compose up -d"

[tasks.gen-docs]
dependencies = ["pu2png"]

[tasks.generate-er]
dependencies = ["compose-up-db", "migrate"]
command = "bash"
install_crate = { crate_name = "sqlant", binary = "sqlant", test_arg = "--help" }
args = ["design/generate-er.sh"]
env_files = [".env"]

[tasks.pu2png]
command = "bash"
dependencies = ["generate-er"]
args = ["design/pu2png.sh"]
